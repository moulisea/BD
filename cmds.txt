Lessons
Lessons
*	External table - create table as select wont work - only work in managed table
*	Compare two strings
	String sdFlag=cid
	if "cid".equals(sdFlag)
*	In control-m, we have CONFIRM=1 at folder level which means the job will run only on request
*	excel	match(b6,$a$2:$a$751,0)	
*   excel match two cells n return 3rd cell value - index($c2:$c238,match(a2,$b$2:$b$238,0))
*	tblproperties("skip.header.line.count"="1"); ==> to skip the hdr and load data to hive table

to find where is gpfdist	-	locate gpfdist

======================================================================================================================
git clone url link from stash

git pull
git add *
git commit -a - after removing # enter :wq
git push 

existing file change
git pull
git commit -a
git push

======================================================================================================================


goup dir	cd ..
root dir	cd /
to come out from multi level	cd ../..
linux distro	cat /etc/*-release

$				value of
#				number of or total number
$#				value of total no of arg passed

ls -al 			list all files n info	
ls *.ext		ending with certain extn
ls -ltrh		detailed dscprn
cp file file1	copy n rename a file
cp -R dir1 dir2 to copy dir wise
mv file file1 	move n rename a file
rm file			remove file
rm *			remove all files in dir
rmdir file		remove dir - will delete only if there are no files inside this dir
rm -rf file		forcefully remove dir
grep txt filenm	srch for text in a file
touch filenm	create a file
cat filenm		to see the details in file
echo `date +"%m%d%Y %H%M%S"`	display date along with time
lsmod | grep ipv6	will give ipv6 detail - to know if our unix runs on ipv6 or ipv4
ps -ef			to list all jobs running
ps -ef userid	to list jobs ran by particular user
mv file1 file2	to rename a file 
grep wording filename
head -1 filename > outputfile	to copy the 1st line to output file
ESC shift G A 	to goto last line of the file in unix
:1 				to goto start line of the file
sed 's/,/:/g' file	will replace , to : in the file
sed '1d' file > file1	to delete the first line from a file
:q!				to not save
du -h folder
$(stat -c%s "CLIENTS_HIERARCHY.txt")	to check size of a file
grep -o 'word' file | wc -l


shift v arrow keys to select and then press x - to delete multiple lines in unix

zip -r fldrnm.zip fldrnm
unzip fldrnm.zip

tar -czvf fldrnm.tar.gz fldrnm		comprs using tar -czvf
tar -xvf fldrnm.tar.gz

gunzip .gzfile		unzip gz 	

below code will read a file line by line and display it
for i in $(cat txtfile);do
...
done
if we want to copy 1st 1000 lines of a big file
	head -1000 srcfl.txt > dstfl.txt
	
	
zip and move scripts from one server to other	
tar -zcvf bin.gz /data06/tmp/RDT/bin/
from 42n15 connect to datarez dev
	sftp v675573@aaa-cstdt-r4-n09.svr.us.jpmchase.net
    get src-gz-file	tgt-folder
tar -zxvf bin.gz


================================
after Esc, :x - to write and quit
-a	show all files beginning with period
to run python 
	python hello.py



================================

sqoop import --connect --username --password --table --target --incremental --check-column --last value 

sqoop import --connect jdbc:mysql://db.foo.com/bar --table employees 

--where "start_date>2000-01-01"		set the where condn
--num-mappers 8						set the no of mappers
--hive-import						directly import to hive
--hive-table dataops.gdelt -m 1
--incremental
--check-column 
--last-value
--target-dir

--incremental append --check-column id --last-value 1205(so it will start loading from 1206)

sqoop import --connect --username -P --table gdelt --hive-import --hive-table dataops.gdelt -m 1

exec_analyse.sh_02222016_150012_25732.log
exec_analyse.sh_02222016_150017_30198.log
exec_analyse.sh_02222016_150017_30202.log
exec_gzip.sh_02222016_150018_30832.log
exec_ruleengine.sh_02222016_150012_25704.log
gpload.sh_02222016_150009_22996.log
gpload.sh_02222016_150015_28594.log
gpload.sh_02222016_150015_28715.log
http_get.sh_02222016_150003_18883.log
preprocess.sh_02222016_150008_21086.log

========================
Hadoop/ Hive
hadoop fs -du RDT	to check space dir wise
hadoop dfs -ls
hadoop dfs -mkdir
hdfs dfs -put/data/dataops/Mouli/GDELT.MASTERREDUCEDV2.TXT gdelt
hdfs dfs -getmerge /user/hive/warehouse/dataops.db/googleevents_txt/ /home/a_aaaetl/gevent/gevent.txt
dfs -cp hdfssrc hdfsdest
dfs -cp srcfile src file destdir
dfs -rmr	=> to remove dir
dfs -get srchdfs tgtlocal
dfs -h => list down the space available
to run shell command from hive - starts with !
mapred job -kill jobid
mapred job -list
hadoop distcp -Dmapreduce.job.queuename=root.DataManagement -update -pb -skipcrccheck hdfs://bdtcstr18n2.svr.us.jpmchase.net:8020/user/a_idreap_prod/CG/ /user/a_aaaetl/spotlight/cg/
	to move files between cluster
Hadoop ZIP commands
	hadoop fs -catRDT/CIS/CLIENT_ALIAS/INIT/20160524/processed/CLIENT_ALIAS.txt_05262016_130857 | gzip -c | hadoop fs -put - RDT/CIS/CLIENT_ALIAS/INIT/20160524/processed/CLIENT_ALIAS_05262016_130857.gz

		hadoop fs -catRDT/ACCOUNT/ACCOUNT/INIT/20141231/processed/ACCOUNT.txt | gzip -c | hadoop fs -put - RDT/ACCOUNT/ACCOUNT/INIT/20141231/processed/ACCOUNT.txt.gz

==============================================
	
Hive Tuning
------------	
1. Partitioning - data divided physically
hive.exec.dynamic.partition=true;
hive.exec.dynamic.partition.mode=nonstrict;
hive.exec.max.dynamic.partitions=15000;
hive.exec.max.dynamic.partitions.pernode=512;

2.bucketing
clustered by(field) into n buckets
hive.enforce.bucketing=true;

3. To set compression at mapper and reducer	
set mapred.compress.map.output = true;
set mapred.output.compress= true;	
	
4. Map join is 	highly beneficial when one table is small so it can fit into memory when doing joins 
hive.auto.convert.join=true	
	
5. parallel execution 
hive.exec.parallel=true

6. DONT use ORDER BY - as it will make only one reducer to run
instead use sort by or distribute by
	
choose appropriate file format for the data we have 
avoid data ingestion that produces too many small files
	
 

	
========================================
	
to know the table size
	hdfs dfs -du /user/hive/warehouse/ | awk '/^[0-9]+/ { print int($1/(1024**3)) " [GB]\t" $2 }'

to write hive o/p to csv
	 hive -e 'select * from gevent where dateadded=20160314' > /data/dataops/gevent_20160314.csv
from beeline
	beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -f hive0411.sql > output_0411.csv
	
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -f hive_0411.sql > output_0411t.csv	
	
maven settings solved the problem
runnable jar - make sure to include log4j jar

alter table gdelt set tblproperties ('orc.compress.size'='1024');

ALTER TABLE tblnme SET FILEFORMAT parquet

ALTER TABLE gdelt CHANGE GoldsteinScale GoldsteinScale FLOAT AFTER QuadClass;

Alter databases
ALTER TABLE default.gdeltccountry RENAME TO bulkload.gdeltccountry

INSERT INTO TABLE tblnm PARTITION ptnnm SELECT * FROM ;

DROP partition
	ALTER TABLE tblnm DROP PARTITION(start_date='2016-06-08')

beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/dataops;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -f hive0419.sql > output0419.csv	


beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/dataops;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -f BU.sql

kinit a_aaaetl@NAEAST.AD.JPMORGANCHASE.COM -k -t /data01/a_aaaetl/a_aaaetl.keytab
beeline
!connect jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/dataops;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM?mapred.job.queue.name=DataManagement
!connect jdbc:hive2://aaa-cstdt-r3-n17.svr.us.jpmchase.net:10000/dataops;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM?mapred.job.queue.name=DataManagement
use dataops

kinit a_intelli_etl@NAEAST.AD.JPMORGANCHASE.COM -k -t /home/a_intelli_etl/a_intelli_etl.keytab 


jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/dataops
jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmch


select rdt_lob_20160419.buid from rdt_lob_20160419 where rdt_lob_20160419.buid like '%buid%' limit 10;

two full outer - 2mr - 109 sec
stream - 88 sec - /*+ STREAMTABLE(a) */
map join - 93 sec - /*+ MAPJOIN() */
stream - 722 sec - 12 min
Hive streams right most table and buffer other tables - we cant buffer big tables - so keep largest table last or use stream table option

stream+vector - 78 sec
set hive.vectorized.execution.enabled = true;
set hive.vectorized.execution.reduce.enabled = true;


LOCATE KEYTAB
user/w497116

----------
LOAD DATA INPATH '/user/a_aaaetl/Mouli/20160310' OVERWRITE INTO TABLE gevent_pqt1 PARTITION(dateadded="20160310");

LOAD DATA INPATH '/user/a_aaaetl/RDT/LOB/LOB_STAGING/INIT/20160419' OVERWRITE INTO TABLE rdt_lob_20160419_s;

Queries
========
select * from gevent where dateadded=20160101 and actor1countrycode='AUS'
select dateadded, count(1) from gevent group by dateadded
select count(1), globaleventid from gevent_p group by globaleventidhaving count(1) > 1

Export hive partition 
	export table gevent_pqt partition(dateadded=20160310) to '/user/../emptydir';
Import hive partition
	import table gevent_parquet partition(dateadded=20160310) from '/user/../emptydir';

parqut to parquet possible
parquet to orc not psble
then altered the gevent_orc format to parquet
then import worked

hdfs dfs -mkdir -p gdelt/Mouli_v1/$date;
export table bulkload.gevent partition(dateadded=date) to 'gdelt/Mouli_v1/date';

hdfs dfs -mkdir -p gdelt/Mouli_v1/20130203;
export table bulkload.gevent partition(dateadded=20130203) to 'gdelt/Mouli_v1/20130203';

beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -e "import table gevent_p partition($a) from '/user/a_aaaetl/Mouli/GEVENT/partitions/Mouli/$date'";

beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -hivevar arg1=$a -hivevar arg2=$fdate -f "hivep.sh";

beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -hivevar arg1=dateadded=20130211 -hivevar arg2=20130211 -f "hivep.sh";
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e select count(1),dateadded from dataops.gevent_p group by dateadded > dateadded.csv
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e "select count(1),actor1countrycodefrom dataops.gevent_p group by actor1countrycode" > act1.csv 
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e "select count(1),actor2countrycodefrom dataops.gevent_p group by actor2countrycode" > act2.csv 
select count(1) from dataops.geventceventcodes		311
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e "select max(goldsteinscale),min(goldsteinscale),avg(goldsteinscale)from dataops.gevent_p" > gold.csv
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e "select max(avgtone),min(avgtone),avg(avgtone)from dataops.gevent_p" > tone.csv
beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e "select max(nummentions),min(nummentions),avg(nummentions)from dataops.gevent_p" > num.csv

beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/dataops;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM" -e "import table gevent_pf1 partition(dateadded=20160320) from '/user/a_aaaetl/Mouli/GEVENT/partitions/Mouli/20160320'"

beeline -u "jdbc:hive2://aaa-cstdt-r2-n07.svr.us.jpmchase.net:10000/dataops;principal=hive/_HOST@NAEAST.AD.JPMORGANCHASE.COM"-e "select * from gevent_pf limit 10000" > out0420.csv 

4/19/16
external table sentry access needed - able to access thru managed table
when we do joins header not present in hive sql
in cib_norm, make sure u add below fields
	start_date text,
	end_date text,
	repeating_group_scenario text,
	record_last_update_user text,
	record_last_update_timestamp text
04/20
 create table as select - we cant do partition
 import table - dynamic ptning doesn't work
 				
Google data
	from bulkload to cibnorm - will take 19 hrs - since each partition is taking close to 1 min
				
-----------

IMPALA
=======
invalidate metadata - it will refresh whatever changes u did in hive and it will reflect in impala

HBASE
=====
hbase shell
list		list tables
status		status of servers
version		1.2.0-cdh5.7.1 

PIG
===
relational operators
cogroup - distinct - filter - foreach - join - limit - load - order - split

personal_data = LOAD '/personal_data.txt' USING PigStorage(',') as (parm1, parm2...);
limit_data = LIMIT personal_data 5;

lines=LOAD '/user/hadoop/word.txt' AS (line:chararray);
words=FOREACH lines GENERATE FLATTEN(TOKENIZE(line)) as word;
grouped=GROUP words by word;
wordcount=FOREACH grouped GENERATE group, COUNT(words);
DUMP wordcount;

big_data=LOAD'data';
--get random 1% sample
smaller_data=SAMPLE big_data 0.01;

get no of rows
LOGS=LOAD 'data';
LOGS_GROUP=GROUP LOGS ALL;
LOGS_COUNT=FOREACH LOGS_GROUP GENERATE COUNT(LOGS);

========================
postgresql
information_schema.tables contain db - schema - tblname 

*****To start gpfdist
./gpfdist -d /data01/a_aaaetl/RDT -p 8083 -l /data01/a_aaaetl/RDT/gpfdist-8083.log & 
/usr/local/greenplum-loaders-4.2.1.0-build-2/bin 
ps -elf | grep gpfdist

24n9
----
/greenplum/greenplum-loaders-4.3.6.2-build-1/bin
./gpfdist -d /data/home/a_opsdata_sec_nd/RDT/morningstar -p 8086 -l /data/home/a_opsdata_sec_nd/RDT/morningstar/gpfdist-8086.log & 

42n15
-----
/data/home/a_intelli_etl/utility/greenplum/greenplum-loaders-4.3.6.1-build-2/bin
./gpfdist -d /home/a_intelli_etl/RDT -p 8088 -l /home/a_intelli_etl/RDT/gpfdist-8088.log & 

./gpfdist -d /data06/tmp -p 8086 -l /data06/tmp/gpfdist-8086.log & 
./gpfdist -d /data06/tmp -p 8082 -l /data06/tmp/gpfdist-8082.log & 

to know the process id -> ps ax | grep gpfdist
to kill gpfdist		kill pid

./gpfdist -d /data06/tmp/ -p 8084 -l /data06/tmp/gpfdist-8084.log & 

***to escape double quotes		-	ESCAPE '\"'


to get list of columns and their types

select column_name,
case 
when domain_name is not null then domain_name
when data_type='character varying' THEN 'varchar('||character_maximum_length||')'
when data_type='numeric' THEN 'numeric('||numeric_precision||','||numeric_scale||')'
else data_type
end as myType


from information_schema.columns
where table_name='creditcard_auth_log_daily'
and table_schema = 'bulkload'
order by ordinal_position

To check the length of a column if its numeric
select count(distinct client_cas) from bulkload.rdt_client_cas_count where length(client_cas::text)<10


rename current table
create new table
copy from existing table to new one using INSERT INTO option

drop view
drop view viewname

drop table tablename

drop multiple cols
alter table bulkload.rdt_currency drop column currency_deliverablestatus, drop column currency_trademodel

alter table name-the data will remain in new table
ALTER TABLE bulkload.rdt_currency RENAME TO rdt_currency_20160224_145300 

alter table column name
ALTER TABLEe tblnm RENAME COLUMN oldcol TO newcol

select * from cib_raw.metadata_columns where rule_name ilike 'currency_master' limit 10

to delete data alone from table
delete from bulkload.rdt_currency;

create table from a select
create table tblname as select *

CAST example
insert into rdt.client_master_test
(client_eci) select cast(trim(client_eci) as bigint) from rdt.client_master limit 10

To list down tables under a schema
	select relname as table frompg_stat_user_tables where schemaname = 'cib_norm' order by relname
To list tablename, ownername under schema	
	select * from pg_tables where schemaname='bulkload' order by tablename;


copy entire data from one table to another table
INSERT INTO bulkload.rdt_currency SELECT * FROM bulkload.rdt_currency_20160224_145300

update
update cib_raw.metadata_columns set target_tablename='LEHRCHYDATA MASTER' where source_name = 'LEHRCHYDATA'

case statement
case when (select a1+a2)=(select b1+b2) then 'TRUE' else 'FALSE' end

drop partition
	alter table bulkload.iods_clients_hierarchy drop partition pyyyymm28
ptn name will be like bulkload.iods_clients_hierarchy_1_prt_pyyyymm28


create table tblname
DISTRIBUTED RANDOMLY
PARTITION BY RANGE(create_custom_date)
(PARTITION p20161201 START ('2016-12-01') END ('2016-12-02') INCLUSIVE WITH (orientation=column, appendonly=true))
;


create partition
DISTRIBUTED RANDOMLY
PARTITION BY RANGE(custom_date)(PARTITION p20161027 START ('2016-10-27'::date) END ('2016-10-28'::date) EXCLUSIVE );

alter partition
ALTER TABLE bulkload.deposit_lda_ach_txns_rim_daily
ADD PARTITION pYYYYMM23 START ('YYYY-MM-23'::date) END ('YYYY-MM-24'::date) exclusive
 WITH (ORIENTATION = COLUMN, COMPRESSTYPE = QUICKLZ, OIDS = FALSE, APPENDONLY = TRUE, COMPRESSLEVEL = 1);
 
if datatype is already in DATE format 
ALTER TABLE bulkload.deposit_lda_ach_txns_rim_daily
ADD PARTITION pYYYYMM23 START ('YYYY-MM-23') END ('YYYY-MM-24') exclusive
 WITH (ORIENTATION = COLUMN, COMPRESSTYPE = QUICKLZ, OIDS = FALSE, APPENDONLY = TRUE, COMPRESSLEVEL = 1);

 ilike multiple items
	select * from cib_validation.wholesale_validation where validation_rule ilike any (array['join %', 'distin%'])
 
SKEW 
SELECT gp_segment_id, count(*) FROM <TABLE_NAME> GROUP BY gp_segment_id
order by gp_segment_id desc 

alter distributed by column
	ALTER TABLE sales SET DISTRIBUTED BY (customer_id);
	ALTER TABLE sales SET DISTRIBUTED RANDOMLY;
	ALTER TABLE sales SET WITH (REORGANIZE=TRUE);
	
to get date from timestamp
	select count(1), iods_hrrchy_client_iodslastupdateddatetime::timestamp::date from bulkload.iods_clients_hierarchy group by iods_hrrchy_client_iodslastupdateddatetime::timestamp::date order by iods_hrrchy_client_iodslastupdateddatetime::timestamp::date	
	
--------

insert into bulkload.rdt_currency(

currency_currencyid,
currency_version ,
currency_lastupdatedtimestamp ,
currency_createdtimestamp ,
currency_source ,
currency_status ,
currency_name ,
currency_numericcode ,
currency_decimalplaces,
currency_emuconversionrate ,
currency_isfundscode ,
currency_isndf ,
currency_isminorcurrency ,
currency_majorcurrency_currencyid ,
currency_enddate ,
currency_locations_primarycurrency_countryid ,
currency_locations_secondarycurrency_countryid ,
custom_create_tm) 
 select
currency_currencyid,
currency_version ,
currency_lastupdatedtimestamp ,
currency_createdtimestamp ,
currency_source ,
currency_status ,
currency_name ,
currency_numericcode ,
currency_decimalplaces,
currency_emuconversionrate ,
currency_isfundscode ,
currency_isndf ,
currency_isminorcurrency ,
currency_majorcurrency_currencyid ,
currency_enddate ,
currency_locations_primarycurrency_countryid ,
currency_locations_secondarycurrency_countryid ,
custom_create_tm 
from bulkload.rdt_currency_20160224_145300 ;

select * from cib_raw.metadata_columns where source_name ilike 'CURRENCY'

select * from cib_raw.metadata_columns where rlimit 10

select * from bulkload.rdt_currency_20160224_145300 where currency_currencyid='XCD'; 
 
select * from cib_norm.book_combined_a where (child_id, parent_id, version, book_caid, bookportfolio_id, booklocality_id, bookdesk_id, bookregion_id) is null and sourcetable='Book'
==========================================================================================

CONTROL+M

****FOLDER_ORDER_METHOD="SYSTEM" - this will tell whether the job is going to run automatically daily or not

/data/scripts/RDT/UAT/bin/http_get.sh INSTRUMENT EQUITY DAILY 20160407
/data/scripts/RDT/UAT/bin/preprocess.sh INSTRUMENT EQUITY DAILY 20160407 Y
/data/scripts/RDT/UAT/bin/gpload.shINSTRUMENT EQUITY DAILY 20160411 gp_var.txt
/data/scripts/RDT/UAT/bin/exec_ruleengine.sh INSTRUMENT EQUITY DAILY 20160411
/data/scripts/RDT/UAT/bin/gpload.sh INSTRUMENT EQUITY DAILY 20160411 master_gp_var.txt
/data/scripts/RDT/UAT/bin/gpload.sh INSTRUMENT EQUITY DAILY 20160411 extend_gp_var.txt
/data/scripts/RDT/UAT/bin/exec_gzip.sh INSTRUMENT EQUITY DAILY 20160411
/data/scripts/RDT/UAT/bin/exec_analyse.sh INSTRUMENT EQUITY DAILY 20160407 gp_var.txt

init_hdfs.sh	

http_get.sh




4/22 ran
/data/scripts/RDT/UAT/bin/gpload.shCLIENT CLIENT INIT 20160421 gp_var.txt

emdev80.controlm.jpmchase.net 

04/11/2016
	the INIT name should have an underscore and no hyphen
	when we setup new jobs, download - dataedit - from processed - run the java jar command which will get u columns names - then create table and then run bulkload
	java -jar /data/scripts/RDT/jar/rdt-tableCreate-jar-with-dependencies.jar /data/scripts/RDT/UAT/CC/CLIENT_ALIAS/INIT/20160410/processed/CLIENT_ALIAS.txt rdt_client_alias dev
	
Errors
	could not translate host name - it means segment error - rerun
	extra col added at the end
	Got NULL POINTER EXCEPTION - Puru changed the home dir in JAVA - they changed this path and so it didnt work
	
common - currency extend/ curr master
instrument - to eliminate locking - analyze will start after data load is complete - all debt, abs will store into one single table

If any new col being sent
	alter current table - RENAME
		alter table bulkload.rdt_abs rename to rdt_abs_20160515
	create new table with new columns		
	INSERT INTO new table from old table
	
To re-run any jobs 
	goto order-> select order date - and then click order

To move bulkload from DEV to UAT
		create tables in UAT like what we have in DEV
		Goto Planning, Export the xml file, change DATACENTER(Q031), RUN_AS(a_jpmis_intellistor), NODEID(bdtcstr38n13.svr.us.jpmchase.net), CMDLINE(/data/rdt/bin), DOMAIL([CTRL-M][UAT])
		Do above changes, goto UAT and import this xml there 
		Update REFERENCE.PROPERTIES in config - it should have the URL link
		Then order with current date and run the jobs - data will be present - make sure in the jobs, they have set INIT frequency, meaning initial load
	
To create DAILY jobs in GREENPLUM	
	checkout init
	copy n create daily - change the scheduling to run daily at 15:00
	checkin both init and daily

Compared the column between what we got in INIT/raw and table column defined in bulkload - should map one to one
take backup of metadata rules and metadata columns - update it
update config.properties, reference.properties
source table and target tbl name shud match except tgt table name will end with _master and that shud reflect in rules and columns table
add below 4 col in tgt table
	start_date text,
	end_date text,
	repeating_group_scenario text,
	record_last_update_user text,
	record_last_update_timestamp text,

	
BUNODE_INIT=https://refdata-frd-uat01.jpmchase.net/finance/BUNODE?data.schemaVersion=1&format=txt&data.delimiter=%09&changesSince=2012-07-01T00:00:00
BUGENHRCHY_INIT=https://refdata-frd-uat01.jpmchase.net/finance/BUGENHRCHY?data.schemaVersion=1&format=txt&data.delimiter=%09
BU_INIT=https://refdata-frd-uat01.jpmchase.net/finance/BU?data.schemaVersion=1&format=txt&data.delimiter=%09
FRE_INIT=https://refdata-frd-uat01.jpmchase.net/finance/FRE?data.schemaVersion=1&format=txt&data.delimiter=%09
BUHRCHY_INIT=https://refdata-frd-uat01.jpmchase.net/finance/BUHRCHY?data.schemaVersion=1&format=txt&data.delimiter=%09
FINVALHRCHY_INIT=https://refdata-frd-uat01.jpmchase.net/finance/FINVALHRCHY?data.schemaVersion=1&format=txt&data.delimiter=%09
LEHRCHYDATA_INIT=https://refdata-frd-uat01.jpmchase.net/finance/LEHRCHYDATA?data.schemaVersion=1&format=txt&data.delimiter=%09
	
	
	
metadata_columns	
rule name 		FRE MASTER
source name		FRE
rdt col nm	
tgt col nm
key col identifier
tgt tblnm		FRE MASTER

metadata rules
rule name		FRE MASTER
rule desc		MASTER COLUMNS 
source name		FRE
src nm url		FRE
asset type cls	FREDATA
asset type url	FRE


LLR
control m feed input shud match below data
change the source and target table name
reference property name change
conf property name change
In rules and columns, the data should be in caps
src and tgt should end with _master

INSERT INTO CIB_RAW.METADATA_RULES VALUES ('LEGAL_ENTITY_HIERARCHY_MASTER', 'MASTER COLUMNS', 'LEGAL_ENTITY_HIERARCHY', 'LEGAL_ENTITY_HIERARCHY', 'LEGAL_ENTITY_HIERARCHY', 'LEGAL_ENTITY_HIERARCHY')

INSERT INTO CIB_RAW.METADATA_COLUMNS (rule_name, source_name, rdt_column_name, target_column_name, key_column_identifier, target_tablename, flag_name) 
VALUES
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_JID', 'LEHRCHYDATA_JID', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_HRCHYID', 'LEHRCHYDATA_HRCHYID', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_LEID', 'LEHRCHYDATA_LEID', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_PRNTLEID', 'LEHRCHYDATA_PRNTLEID', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_HRCHYLVLNB', 'LEHRCHYDATA_HRCHYLVLNB', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_OWNRSHPPC', 'LEHRCHYDATA_OWNRSHPPC', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_CREATEDT', 'LEHRCHYDATA_CREATEDT', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_EFFFROMDT', 'LEHRCHYDATA_EFFFROMDT', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_EFFTODT', 'LEHRCHYDATA_EFFTODT', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_LASTUPDDT', 'LEHRCHYDATA_LASTUPDDT', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_ACTIVEFLG', 'LEHRCHYDATA_ACTIVEFLG', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_LASTUPDATEDTIMESTAMP', 'LEHRCHYDATA_LASTUPDATEDTIMESTAMP', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_CREATIONTIMESTAMP', 'LEHRCHYDATA_CREATIONTIMESTAMP', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', ''),
('LEGAL_ENTITY_HIERARCHY_MASTER', 'LEGAL_ENTITY_HIERARCHY', 'LEHRCHYDATA_VERSION', 'LEHRCHYDATA_VERSION', 'Y', 'LEGAL_ENTITY_HIERARCHY_MASTER', '')



 INSERT INTO CIB_RAW.METADATA_RULES VALUES ('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'MASTER COLUMNS', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY')

INSERT INTO CIB_RAW.METADATA_COLUMNS (rule_name, source_name, rdt_column_name, target_column_name, key_column_identifier, target_tablename, flag_name) 
VALUES
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_JID', 'BUGENHRCHY_JID', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_HRCHYID', 'BUGENHRCHY_HRCHYID', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_FREID', 'BUGENHRCHY_FREID', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_SNODEID', 'BUGENHRCHY_SNODEID', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT1', 'BUGENHRCHY_GENPRNT1', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT2', 'BUGENHRCHY_GENPRNT2', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT3', 'BUGENHRCHY_GENPRNT3', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT4', 'BUGENHRCHY_GENPRNT4', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT5', 'BUGENHRCHY_GENPRNT5', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT6', 'BUGENHRCHY_GENPRNT6', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT7', 'BUGENHRCHY_GENPRNT7', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT8', 'BUGENHRCHY_GENPRNT8', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT9', 'BUGENHRCHY_GENPRNT9', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT10', 'BUGENHRCHY_GENPRNT10', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT11', 'BUGENHRCHY_GENPRNT11', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT12', 'BUGENHRCHY_GENPRNT12', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT13', 'BUGENHRCHY_GENPRNT13', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT14', 'BUGENHRCHY_GENPRNT14', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT15', 'BUGENHRCHY_GENPRNT15', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT16', 'BUGENHRCHY_GENPRNT16', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT17', 'BUGENHRCHY_GENPRNT17', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT18', 'BUGENHRCHY_GENPRNT18', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT19', 'BUGENHRCHY_GENPRNT19', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT20', 'BUGENHRCHY_GENPRNT20', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT21', 'BUGENHRCHY_GENPRNT21', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT22', 'BUGENHRCHY_GENPRNT22', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT23', 'BUGENHRCHY_GENPRNT23', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT24', 'BUGENHRCHY_GENPRNT24', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT25', 'BUGENHRCHY_GENPRNT25', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT26', 'BUGENHRCHY_GENPRNT26', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT27', 'BUGENHRCHY_GENPRNT27', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT28', 'BUGENHRCHY_GENPRNT28', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT29', 'BUGENHRCHY_GENPRNT29', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_GENPRNT30', 'BUGENHRCHY_GENPRNT30', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', ''),	
('BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY', 'BUGENHRCHY_VERSION', 'BUGENHRCHY_VERSION', 'Y', 'BUSINESS_UNIT_HORIZONTAL_HIERARCHY_MASTER', '')
	


INSERT INTO CIB_RAW.METADATA_RULES VALUES ('FINANCIAL_REPORTING_ENTITY_MASTER', 'MASTER COLUMNS', 'FINANCIAL_REPORTING_ENTITY', 'FINANCIAL_REPORTING_ENTITY', 'FINANCIAL_REPORTING_ENTITY', 'FINANCIAL_REPORTING_ENTITY')

INSERT INTO CIB_RAW.METADATA_COLUMNS (rule_name, source_name, rdt_column_name, target_column_name, key_column_identifier, target_tablename, flag_name) 
VALUES
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_JID', 'FRE_JID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FREID', 'FRE_FREID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FREREPORTROLETYPE', 'FRE_FREREPORTROLETYPE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRENAMELONG', 'FRE_FRENAMELONG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRENAMESHORT', 'FRE_FRENAMESHORT', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_COUNTERPARTYGRPCD', 'FRE_COUNTERPARTYGRPCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_COUNTERPARTYGRPDESC', 'FRE_COUNTERPARTYGRPDESC', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRECNTRYROLETYPENAME', 'FRE_FRECNTRYROLETYPENAME', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_COUNTRYCD', 'FRE_COUNTRYCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_COUNTRYNAME', 'FRE_COUNTRYNAME', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRECNTRYSUBDROLETYPNM', 'FRE_FRECNTRYSUBDROLETYPNM', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_COUNTRYSUBDIVISIONCD', 'FRE_COUNTRYSUBDIVISIONCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_COUNTRYSUBDIVISIONNAME', 'FRE_COUNTRYSUBDIVISIONNAME', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRECURRUSAGETYPENAME', 'FRE_FRECURRUSAGETYPENAME', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CURRENCYCD', 'FRE_CURRENCYCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CURRENCYNAME', 'FRE_CURRENCYNAME', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FREWORKERROLETYPNM', 'FRE_FREWORKERROLETYPNM', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_WORKERID', 'FRE_WORKERID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_BASELREPORTFLAG', 'FRE_BASELREPORTFLAG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_BASELINSURFLAG', 'FRE_BASELINSURFLAG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_ASSETBCPCONDUITFLAG', 'FRE_ASSETBCPCONDUITFLAG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_OWNERSHIPTRACKID', 'FRE_OWNERSHIPTRACKID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FREFOREIGNDOMESTFLAG', 'FRE_FREFOREIGNDOMESTFLAG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRECREATEDDATE', 'FRE_FRECREATEDDATE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FREEFFECTIVEDATE', 'FRE_FREEFFECTIVEDATE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FRECLOSEDATE', 'FRE_FRECLOSEDATE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_FREREPORTCLOSEDATE', 'FRE_FREREPORTCLOSEDATE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LEID', 'FRE_LEID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_ACTIVEFLG', 'FRE_ACTIVEFLG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_OTSOWNERSHIPID', 'FRE_OTSOWNERSHIPID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_OTSOWNINTRSTFLG', 'FRE_OTSOWNINTRSTFLG', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_ADDRESS', 'FRE_ADDRESS', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CITYCD', 'FRE_CITYCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CITYNM', 'FRE_CITYNM', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_EQTYACCTRCNCD', 'FRE_EQTYACCTRCNCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CLIENTID', 'FRE_CLIENTID', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CORPGLFREQIND', 'FRE_CORPGLFREQIND', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LASTUPDDT', 'FRE_LASTUPDDT', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_OPENDT', 'FRE_OPENDT', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_EFFTODT', 'FRE_EFFTODT', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LGCYDDATYPE', 'FRE_LGCYDDATYPE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LGCYDDAACCT', 'FRE_LGCYDDAACCT', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LGCYLCLLEDGERCD', 'FRE_LGCYLCLLEDGERCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LGCYRPTUNIT', 'FRE_LGCYRPTUNIT', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_TRNSMSNGL', 'FRE_TRNSMSNGL', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_PRCSTRGYCD', 'FRE_PRCSTRGYCD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_REGREPCHARTYPECD', 'FRE_REGREPCHARTYPECD', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_OTDCONSOLCDFRE', 'FRE_OTDCONSOLCDFRE', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_OTDCONSOLCDDESC', 'FRE_OTDCONSOLCDDESC', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_LASTUPDATEDTIMESTAMP', 'FRE_LASTUPDATEDTIMESTAMP', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_CREATIONTIMESTAMP', 'FRE_CREATIONTIMESTAMP', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', ''),
('FINANCIAL_REPORTING_ENTITY_MASTER', 'FINANCIAL_REPORTING_ENTITY','FRE_VERSION', 'FRE_VERSION', 'Y', 'FINANCIAL_REPORTING_ENTITY_MASTER', '')



STORED AS ORC tblproperties ("orc.compress"="SNAPPY","orc.compress.size"="1024", "orc.stripe.size"="268435456", "orc.row.index.stride"="10000", "orc.create.index"="true")



INSERT INTO CIB_RAW.METADATA_RULES VALUES ('LOB_MASTER', 'MASTER COLUMNS', 'LOB', 'LOB', 'LOB', 'LOB')

INSERT INTO CIB_RAW.METADATA_COLUMNS (rule_name, source_name, rdt_column_name, target_column_name, key_column_identifier, target_tablename, flag_name) 
VALUES
 ('LOB_MASTER', 'LOB' ,'buid','buid', 'Y', 'LOB_MASTER', ''), 
 ('LOB_MASTER', 'LOB' ,'busnodeid ','busnodeid ', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'prntbunodeid','prntbunodeid', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'prntbusnodeid','prntbusnodeid', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'replacementid ','replacementid ', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'georoletype','georoletype', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'buworkerroletypename','buworkerroletypename', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'butypename','butypename', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'buclosedate','buclosedate', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lobgrpcd','lobgrpcd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lobgrpnm','lobgrpnm', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'subgrpcd','subgrpcd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'subgrpnm','subgrpnm', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'loblobcd','loblobcd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'loblobnm','loblobnm', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'sublobcd','sublobcd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'sublobnm','sublobnm', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'cnsldtncd','cnsldtncd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lgcyddaacct','lgcyddaacct', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lngthcmplntflg','lngthcmplntflg', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'activeflg','activeflg', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lgcylclledgercd','lgcylclledgercd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lgcyhyperflg','lgcyhyperflg', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'buidzerofill','buidzerofill', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'lobcd','lobcd', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'hrchylvlnb','hrchylvlnb', '', 'LOB_MASTER', '')
	

INSERT INTO CIB_RAW.METADATA_COLUMNS (rule_name, source_name, rdt_column_name, target_column_name, key_column_identifier, target_tablename, flag_name) 
VALUES
 ('LOB_MASTER', 'LOB' ,'bulastupdatedtimestamp','bulastupdatedtimestamp', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'bunodelastupdatedtimestamp','bunodelastupdatedtimestamp', '', 'LOB_MASTER', ''),
 ('LOB_MASTER', 'LOB' ,'buhrchylastupdatedtimestamp','buhrchylastupdatedtimestamp', '', 'LOB_MASTER', '')

	
INSERT INTO CIB_RAW.METADATA_RULES VALUES ('LOB_MASTER_EXTEND', 'EXTEND COLUMNS', 'LOB', 'LOB', 'LOB', 'LOB')

INSERT INTO CIB_RAW.METADATA_COLUMNS (rule_name, source_name, rdt_column_name, target_column_name, key_column_identifier, target_tablename, flag_name) 
VALUES
 ('LOB_MASTER_EXTEND', 'LOB' ,'buid','buid', 'Y', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'freid','freid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'busnodeid','busnodeid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'prntbunodeid','prntbunodeid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'prntbusnodeid','prntbusnodeid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'trnsfrprccd','trnsfrprccd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'trnsfrprcnm','trnsfrprcnm', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lobownrcd','lobownrcd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lobownrnm','lobownrnm', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'mrktcd','mrktcd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'mrktnm','mrktnm', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'region','region', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'buversion','buversion', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'ledgercd','ledgercd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'ledgerpostingflag','ledgerpostingflag', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'profitcccd','profitcccd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcyorgtypecd','lgcyorgtypecd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcyorgtypenm','lgcyorgtypenm', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcycorpviewflg','lgcycorpviewflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcyorgupto','lgcyorgupto', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'actrevflg','actrevflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'plnrevflg','plnrevflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'actprmrycstflg','actprmrycstflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'plnprmrycstflg','plnprmrycstflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'actscndrycstflg','actscndrycstflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'plnscndrycstflg','plnscndrycstflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'taxonomyid','taxonomyid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcystrsbatchid','lgcystrsbatchid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'bunamelong','bunamelong', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'bunameshort','bunameshort', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcyrltdcoid','lgcyrltdcoid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'workerid','workerid', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'workername','workername', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'mastypecd','mastypecd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'masnm','masnm', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'countrysubdivisioncd','countrysubdivisioncd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'countrysubdivname','countrysubdivname', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'citycd','citycd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'cityname','cityname', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'lgcystrsglblflg','lgcystrsglblflg', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'taxcd','taxcd', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'taxcddesc','taxcddesc', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'countryname','countryname', '', 'LOB_EXTEND', ''),
 ('LOB_MASTER_EXTEND', 'LOB' ,'countrycd','countrycd', '', 'LOB_EXTEND', '')


	
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_INDUSTRY','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_INDUSTRY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_INDUSTRYGROUP','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_INDUSTRYGROUP','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_SECTOR','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_SECTOR','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_SUBINDUSTRY','ENTITY_INDUSTRYCLASSIFICATIONS_GICSDERIVED_SUBINDUSTRY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_ADDRESS','ENTITY','ENTITY_ADDRESS_CITY','ENTITY_ADDRESS_CITY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_ADDRESS','ENTITY','ENTITY_ADDRESS_COUNTRYID','ENTITY_ADDRESS_COUNTRYID','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_ADDRESS','ENTITY','ENTITY_ADDRESS_LINE1','ENTITY_ADDRESS_LINE1','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_ADDRESS','ENTITY','ENTITY_ADDRESS_LINE2','ENTITY_ADDRESS_LINE2','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_ADDRESS','ENTITY','ENTITY_ADDRESS_POSTALCODE','ENTITY_ADDRESS_POSTALCODE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_ADDRESS','ENTITY','ENTITY_ADDRESS_STATE','ENTITY_ADDRESS_STATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_BANKRUPTCY','ENTITY','ENTITY_BANKRUPTCY_FILEDATE','ENTITY_BANKRUPTCY_FILEDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_BANKRUPTCY','ENTITY','ENTITY_BANKRUPTCY_ISINBANKRUPTCY','ENTITY_BANKRUPTCY_ISINBANKRUPTCY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_HIERARCHIES','ENTITY','ENTITY_HIERARCHIES_CREDITHIERARCHY_ISULTIMATEPARENT','ENTITY_HIERARCHIES_CREDITHIERARCHY_ISULTIMATEPARENT','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_HIERARCHIES','ENTITY','ENTITY_HIERARCHIES_CREDITHIERARCHY_PARENTENTITYID','ENTITY_HIERARCHIES_CREDITHIERARCHY_PARENTENTITYID','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_HIERARCHIES','ENTITY','ENTITY_HIERARCHIES_CREDITHIERARCHY_PARENTRELATIONSHIP','ENTITY_HIERARCHIES_CREDITHIERARCHY_PARENTRELATIONSHIP','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_HIERARCHIES','ENTITY','ENTITY_HIERARCHIES_CREDITHIERARCHY_ULTIMATEPARENTENTITYID','ENTITY_HIERARCHIES_CREDITHIERARCHY_ULTIMATEPARENTENTITYID','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_SIC','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_SIC_INDUSTRYCODE','ENTITY_INDUSTRYCLASSIFICATIONS_SIC_INDUSTRYCODE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICS','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_INDUSTRY','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_INDUSTRY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICS','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_INDUSTRYGROUP','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_INDUSTRYGROUP','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICS','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_SECTOR','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_SECTOR','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_GICS','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_SUBINDUSTRY','ENTITY_INDUSTRYCLASSIFICATIONS_GICS_SUBINDUSTRY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_AGENCY','ENTITY_RATINGS_RATING_AGENCY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_CODE','ENTITY_RATINGS_RATING_CODE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_CURRENCYTYPE','ENTITY_RATINGS_RATING_CURRENCYTYPE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_DATE','ENTITY_RATINGS_RATING_DATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_DESCRIPTION','ENTITY_RATINGS_RATING_DESCRIPTION','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_ENDORSEMENTSTATUS','ENTITY_RATINGS_RATING_ENDORSEMENTSTATUS','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_ISPROVISIONAL','ENTITY_RATINGS_RATING_ISPROVISIONAL','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_JPMWATERFALLRATINGRULE','ENTITY_RATINGS_RATING_JPMWATERFALLRATINGRULE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_JPMWATERFALLUNDERLYINGINSTRUMENTID','ENTITY_RATINGS_RATING_JPMWATERFALLUNDERLYINGINSTRUMENTID','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_JPMWATERFALLUNDERLYINGRATINGDATE','ENTITY_RATINGS_RATING_JPMWATERFALLUNDERLYINGRATINGDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_MODIFIER','ENTITY_RATINGS_RATING_MODIFIER','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_NAME','ENTITY_RATINGS_RATING_NAME','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_NATIONAL','ENTITY_RATINGS_RATING_NATIONAL','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_OUTLOOK','ENTITY_RATINGS_RATING_OUTLOOK','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_OUTLOOKDATE','ENTITY_RATINGS_RATING_OUTLOOKDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_PROVIDER','ENTITY_RATINGS_RATING_PROVIDER','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_PROVISIONAL','ENTITY_RATINGS_RATING_PROVISIONAL','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_QUALIFIER','ENTITY_RATINGS_RATING_QUALIFIER','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_TYPE','ENTITY_RATINGS_RATING_TYPE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_WATCH','ENTITY_RATINGS_RATING_WATCH','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_RATINGS_RATING','ENTITY','ENTITY_RATINGS_RATING_WATCHDATE','ENTITY_RATINGS_RATING_WATCHDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_ICB','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_INDUSTRY','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_INDUSTRY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_ICB','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_SECTOR','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_SECTOR','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_ICB','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_SUBSECTOR','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_SUBSECTOR','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_ICB','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_SUPERSECTOR','ENTITY_INDUSTRYCLASSIFICATIONS_ICB_SUPERSECTOR','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_NACE','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_NACE_CODE','ENTITY_INDUSTRYCLASSIFICATIONS_NACE_CODE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRY','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRY','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRYGROUP','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRYGROUP','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRYSECTOR','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRYSECTOR','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRYSUBGROUP','ENTITY_INDUSTRYCLASSIFICATIONS_BLOOMBERG_INDUSTRYSUBGROUP','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_CICIID','ENTITY_CICI_CICIID','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_CICIIDASSIGNEDDATE','ENTITY_CICI_CICIIDASSIGNEDDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_CICIIDDISABLEDDATE','ENTITY_CICI_CICIIDDISABLEDDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_CICIIDLASTUPDATEDDATE','ENTITY_CICI_CICIIDLASTUPDATEDDATE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_CICILEGALNAME','ENTITY_CICI_CICILEGALNAME','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_LEGALBUSINESSSTRUCTURE','ENTITY_CICI_LEGALBUSINESSSTRUCTURE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_CICI','ENTITY','ENTITY_CICI_STATUS','ENTITY_CICI_STATUS','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_INDUSTRYCLASSIFICATIONS_NAICS','ENTITY','ENTITY_INDUSTRYCLASSIFICATIONS_NAICS_PRIMARYCODE','ENTITY_INDUSTRYCLASSIFICATIONS_NAICS_PRIMARYCODE','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_BLOOMBERGCOMPANYCORPTICKER','ENTITY_BLOOMBERGCOMPANYCORPTICKER','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_BLOOMBERGCOMPANYID','ENTITY_BLOOMBERGCOMPANYID','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_COUNTRYDOMICILE','ENTITY_COUNTRYDOMICILE','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_COUNTRYINCORPORATION','ENTITY_COUNTRYINCORPORATION','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_COUNTRYRISK','ENTITY_COUNTRYRISK','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_CREATEDTIMESTAMP','ENTITY_CREATEDTIMESTAMP','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_ENTITYID','ENTITY_ENTITYID','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_LASTUPDATEDTIMESTAMP','ENTITY_LASTUPDATEDTIMESTAMP','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_NAME','ENTITY_NAME','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_STATUS','ENTITY_STATUS','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_ULTIMATEPARENTBLOOMBERGTERMINALTICKER','ENTITY_ULTIMATEPARENTBLOOMBERGTERMINALTICKER','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','VERSION','VERSION','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('ENTITY_MASTER','ENTITY','ENTITY_ISPRIVATE','ENTITY_ISPRIVATE','Y','ENTITY_MASTER','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('COMMON_ENTITY_EXTEND','ENTITY','ENTITY_ENTITYID','ENTITY_ENTITYID','Y','ENTITY_EXTEND','');
INSERT INTO CIB_RAW.METADATA_COLUMNS VALUES ('COMMON_ENTITY_EXTEND','ENTITY','VERSION','VERSION','Y','ENTITY_EXTEND','');

	
	
flatmap
	







