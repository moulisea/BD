package com.jpmis.test;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;

import org.apache.hadoop.io.compress.SplitCompressionInputStream;
import org.apache.log4j.Logger;

public class TableCreate {
	
	private static final Logger logger = Logger.getLogger(TableCreate.class);
	private int randomNum = 0;
	
	public void createTable(ArrayList<String> colNames, String tblName, String filName) throws IOException
	{
		
		logger.debug("in createTable");
		logger.debug("colNames Size " + colNames.size());
		System.out.println("size=" +colNames.size());
		StringBuilder sb = new StringBuilder();
		
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_hhmmss");
		
		String formattedDate = formatter.format(new Date());
		
		sb.append("DROP TABLE IF EXISTS " + tblName + "_external;" + "\n\n");
		
		sb.append("CREATE EXTERNAL TABLE IF NOT EXISTS " + tblName + "_external" + "\n");
		sb.append("(\n");
		
		 for (int i = 0; i < colNames.size(); i++)
		 {
			 logger.debug("i " + i);
			 if (colNames.size() - 1 == i  )
			 {
				 sb.append(colNames.get(i) + " string\n");
			 }
			 else
			 {
				 sb.append(colNames.get(i) + " string,\n"); 
			 }
		 }
		sb.append(")\n");
		sb.append("ROW FORMAT DELIMITED \n");
		sb.append("FIELDS TERMINATED BY '\001' \n");
		sb.append("STORED AS TEXTFILE \n");
		sb.append("LOCATION '/user/a_aaaetl/RDT/LOB/BUHRCHY/INIT/20160417/processed'; \n\n");
		
		sb.append("INSERT INTO TABLE " + tblName + "\n");
		sb.append("SELECT \n");
		 for (int i = 0; i < colNames.size(); i++)
		 {
			 logger.debug("i " + i);
			 if (colNames.size() - 1 == i  )
			 {
				 sb.append(colNames.get(i) + " \n");
			 }
			 else
			 {
				 sb.append(colNames.get(i) + " ,\n"); 
			 }
		 }
		sb.append("FROM " + tblName +"_external;" + "\n");
		sb.append(" \n");		
		
		//System.out.println(sb);
		File file = new File("c:/Users/V675573/Downloads/sql.txt");
		BufferedWriter writer = new BufferedWriter(new FileWriter(file));
		writer.write(sb.toString());
		writer.close();		 	
	}
	
	public String addRandomNum(String colName)
	{
		randomNum = randomNum + 1;
		return colName.trim() + "_" + randomNum;
		
	}
	
	public ArrayList<String> removeDuplicateColumnNames(ArrayList<String> list)
	{
		logger.debug("list Size " + list.size());
		HashSet set = new HashSet();
		ArrayList<String> al = new ArrayList<String>();
		for (int i = 0; i < list.size(); i++) {
			logger.debug("Adding " + list.get(i));
			  boolean val = set.add(list.get(i));
			  logger.debug("Set Size " + set.size());
			  logger.debug(val);
			  if (val == true) {
				  
				  while ( val == false)
				  {
					  val = set.add(addRandomNum(list.get(i)));
				  }
				  al.add(list.get(i));
				  randomNum = 0;
			  	
			  }
			  else
			  {
				  al.add(list.get(i));
			  }
			 }
		logger.debug(set.size());
		return al;
		
	}
	
	public String trimColumnName(String fieldName)
	{
		logger.debug("in trimColumnName " + fieldName);
		String[] fields = fieldName.split("_");
		String ColumnName = "";
		String return_Column_Name = "";
		for (int i = fields.length - 1; i >= 0; i--)
		{
			logger.debug(fields[i]);
			
			if (ColumnName.isEmpty())
			{
				ColumnName = fields[i];
			}
			else
			{
				ColumnName = fields[i] + "_" + ColumnName;
			}
	
			if (ColumnName.length() < 60)
			{
				return_Column_Name = ColumnName;
			
			}
			else
			{
				break;
			}
		}
		return return_Column_Name;
	}
	
	public ArrayList<String> readData(String fileName) throws IOException
	{
		String [] fields = FileUtils.readHeader(fileName).split("\\x01",-1);		
		return cleanMetaData(new ArrayList<String>(Arrays.asList(fields)));
		
	}
	
	public ArrayList<String> cleanMetaData(ArrayList<String> columnNames)
	{
		ArrayList<String> cl_list = new ArrayList<String>();
		for (String field : columnNames)
		{
			logger.debug(field);
			field = field.replace(".", "_");
			cl_list.add(trimColumnName(field));
			
		}
		return removeDuplicateColumnNames(cl_list);
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		
		TableCreate tb = new TableCreate();
		tb.createTable(tb.readData(args[0]), args[1], args[0]);

	}
}
